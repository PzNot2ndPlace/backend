package ru.tbank.backend.service.impl;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import ru.tbank.backend.dto.WeatherResponse;


@Service
public class WeatherService {

    @Value("${weatherApi.token}")
    private String apiKey;

    private final RestTemplate restTemplate = new RestTemplate();

    public WeatherResponse fetchWeather(String city) {
        try {
            String url = "http://api.weatherapi.com/v1/current.json?key=" + apiKey + "&q=" + city;
            String json = restTemplate.getForObject(url, String.class);
            JSONObject obj = new JSONObject(json);
            JSONObject current = obj.getJSONObject("current");

            double temp = current.getDouble("temp_c");

            String rawCondition = current.getJSONObject("condition").getString("text").toLowerCase();
            String condition;

            if (rawCondition.contains("rain")) {
                condition = "rainy";
            } else if (rawCondition.contains("clear")) {
                condition = "clear";
            } else {
                condition = "other";
            }

            return new WeatherResponse(temp, condition);
        } catch (RuntimeException e) {
            return new WeatherResponse(15D, "clear");
        }
    }

    public String getWeatherString() {
        var message = new StringBuilder();
        WeatherResponse weather = fetchWeather("tomsk");

        message.append("üå§Ô∏è –ù–µ–º–Ω–æ–≥–æ –æ –ø–æ–≥–æ–¥–µ:\n");

        if (weather.getTemperature() > 30) {
            message.append("‚òÄÔ∏è –°–µ–≥–æ–¥–Ω—è –∂–∞—Ä–∫–æ (")
                    .append(weather.getTemperature()).append("¬∞C). –ù–µ –∑–∞–±—É–¥—å –≤–æ–¥—É –∏ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä!\n");
        } else if (weather.getTemperature() < 5) {
            message.append("‚ùÑÔ∏è –°–µ–≥–æ–¥–Ω—è —Ö–æ–ª–æ–¥–Ω–æ (")
                    .append(weather.getTemperature()).append("¬∞C). –û–¥–µ–≤–∞–π—Å—è —Ç–µ–ø–ª–µ–µ!\n");
        } else {
            message.append("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è: ").append(weather.getTemperature()).append("¬∞C.\n");
        }

        String condition = weather.getCondition().toLowerCase();
        if (condition.contains("rain") || condition.contains("–¥–æ–∂–¥—å")) {
            message.append("üåßÔ∏è –í–æ–∑—å–º–∏ –∑–æ–Ω—Ç–∏–∫, –≤–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å!\n");
        } else if (condition.contains("snow") || condition.contains("—Å–Ω–µ–≥")) {
            message.append("‚ùÑÔ∏è –ù–∞ —É–ª–∏—Ü–µ —Å–Ω–µ–≥! –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö.\n");
        } else if (condition.contains("clear") || condition.contains("—è—Å–Ω–æ")) {
            message.append("‚òÄÔ∏è –Ø—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!\n");
        } else if (condition.contains("cloud") || condition.contains("–æ–±–ª–∞—á–Ω–æ")) {
            message.append("‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ, –Ω–æ –±–µ–∑ –æ—Å–∞–¥–∫–æ–≤.\n");
        }
        return message.toString();
    }
}